"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ATS (Automated Trading System).

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∏ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
"""

import asyncio
import logging
import signal
import sys
from typing import List

import click
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

from src.synchronizer.sync_service import SyncService

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
sync_service = SyncService()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("ats.log"), logging.StreamHandler(sys.stdout)],
)

logger = logging.getLogger(__name__)
console = Console()


class ATSCLI:
    """
    CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ATS.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.shutdown_requested = False

    def setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""

        def signal_handler(signum, frame):
            console.print("\n[yellow]–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...[/yellow]")
            self.shutdown_requested = True
            if sync_service:
                sync_service.stop_sync()

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    async def initialize_system(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É ATS.

        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            console.print("[bold blue]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ATS...[/bold blue]")

            # –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤—ã—à–µ

            if not await sync_service.initialize():
                console.print("[bold red][ERR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã[/bold red]")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
            health = await sync_service.check_system_health()

            if health["status"] == "healthy":
                console.print("[bold green]–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ[/bold green]")
                self._display_system_status(health)
                return True
            else:
                console.print(
                    "[bold yellow]–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏[/bold yellow]"
                )
                self._display_system_status(health)
                return True

        except Exception as e:
            console.print(
                f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/bold red]"
            )
            return False

    def _display_system_status(self, health: dict) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
        table = Table(title="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
        table.add_column("–î–µ—Ç–∞–ª–∏", style="white")

        for component, status in health["components"].items():
            status_icon = {
                "ok": "[OK]",
                "unavailable": "[WARN]",
                "disconnected": "[DISC]",
                "error": "[ERR]",
            }.get(status["status"], "[?]")

            details = str(status.get("version", status.get("error", "OK")))
            table.add_row(component, f"{status_icon} {status['status']}", details)

        console.print(table)

    async def run_sync_command(
        self, symbols: List[str], continuous: bool = False, interval: int = 60
    ) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.

        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            continuous: –§–ª–∞–≥ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if not sync_service:
            console.print(
                "[bold red][ERR] –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/bold red]"
            )
            return

        console.print(
            f"[bold blue]–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {', '.join(symbols)}[/bold blue]"
        )

        if continuous:
            console.print(
                f"[yellow]–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫.[/yellow]"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            await sync_service.start_continuous_sync(symbols, interval)

            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while not self.shutdown_requested and sync_service.is_running:
                await asyncio.sleep(1)

        else:
            # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            quotes_result = await sync_service.sync_quotes(symbols)
            trades_result = await sync_service.sync_trades()

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._display_sync_results(quotes_result, trades_result)

    def _display_sync_results(self, quotes_result: dict, trades_result: dict) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
        quotes_table = Table(title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫")
        quotes_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        quotes_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")

        quotes_table.add_row(
            "–°—Ç–∞—Ç—É—Å", "[OK] –£—Å–ø–µ—à–Ω–æ" if quotes_result["success"] else "[ERR] –û—à–∏–±–∫–∞"
        )
        quotes_table.add_row("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", str(quotes_result["synced_quotes"]))
        quotes_table.add_row(
            "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤", str(len(quotes_result["symbols_processed"]))
        )

        if quotes_result["errors"]:
            quotes_table.add_row("–û—à–∏–±–æ–∫", str(len(quotes_result["errors"])))

        console.print(quotes_table)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–¥–µ–ª–æ–∫
        trades_table = Table(title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫")
        trades_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        trades_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")

        trades_table.add_row(
            "–°—Ç–∞—Ç—É—Å", "[OK] –£—Å–ø–µ—à–Ω–æ" if trades_result["success"] else "[ERR] –û—à–∏–±–∫–∞"
        )
        trades_table.add_row("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", str(trades_result["synced_trades"]))

        if trades_result["errors"]:
            trades_table.add_row("–û—à–∏–±–æ–∫", str(len(trades_result["errors"])))

        console.print(trades_table)

    async def show_status_command(self) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.
        """
        if not sync_service:
            console.print(
                "[bold red][ERR] –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/bold red]"
            )
            return

        status = await sync_service.get_sync_status()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
        status_panel = Panel(
            f"[bold]–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:[/bold] {'üü¢ –ó–∞–ø—É—â–µ–Ω–∞' if status['is_running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
            f"[bold]–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:[/bold] {status['last_sync_time'] or '–ù–∏–∫–æ–≥–¥–∞'}\n"
            f"[bold]–û—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:[/bold] {status['sync_errors']}",
            title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
            border_style="blue",
        )
        console.print(status_panel)

        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
        health = status["system_health"]
        health_panel = Panel(
            f"[bold]–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:[/bold] {health['status']}\n"
            f"[bold]–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:[/bold] {len(health['components'])}",
            title="–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã",
            border_style="green" if health["status"] == "healthy" else "yellow",
        )
        console.print(health_panel)

    async def run_interactive_mode(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º CLI.
        """
        console.print("[bold green]–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ATS CLI![/bold green]")
        console.print("[yellow]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:[/yellow]")
        console.print(
            "  [cyan]sync[/cyan] <—Å–∏–º–≤–æ–ª—ã> [--continuous] [--interval N] - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"
        )
        console.print("  [cyan]status[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        console.print("  [cyan]health[/cyan] - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã")
        console.print("  [cyan]quit[/cyan] –∏–ª–∏ [cyan]exit[/cyan] - –≤—ã—Ö–æ–¥")

        while not self.shutdown_requested:
            try:
                command = await self._get_input_async("ATS> ")

                if command.lower() in ["quit", "exit", "q"]:
                    break
                elif command.lower() == "status":
                    await self.show_status_command()
                elif command.lower() == "health":
                    health = await sync_service.check_system_health()
                    self._display_system_status(health)
                elif command.startswith("sync"):
                    await self._parse_sync_command(command)
                else:
                    console.print(
                        "[yellow]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.[/yellow]"
                    )

            except KeyboardInterrupt:
                console.print("\n[yellow]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞[/yellow]")
            except Exception as e:
                console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")

    async def _get_input_async(self, prompt: str) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã."""
        loop = asyncio.get_event_loop()

        # –í Windows –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return await loop.run_in_executor(None, input, prompt)

    async def _parse_sync_command(self, command: str) -> None:
        """–ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        parts = command.split()
        if len(parts) < 2:
            console.print(
                "[red]–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sync <—Å–∏–º–≤–æ–ª—ã> [--continuous] [--interval N][/red]"
            )
            return

        symbols = parts[1].split(",") if "," in parts[1] else [parts[1]]
        continuous = "--continuous" in command
        interval = 60  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä interval
        for i, part in enumerate(parts):
            if part == "--interval" and i + 1 < len(parts):
                try:
                    interval = int(parts[i + 1])
                    break
                except ValueError:
                    console.print("[red]–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞[/red]")
                    return

        await self.run_sync_command(symbols, continuous, interval)

    async def cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º."""
        if sync_service:
            await sync_service.close()


@click.group()
@click.option("--debug", is_flag=True, help="–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
def cli(debug):
    """ATS - Automated Trading System CLI."""
    if debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")


@cli.command()
@click.argument("symbols", nargs=-1)
@click.option("--continuous", "-c", is_flag=True, help="–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
@click.option(
    "--interval", "-i", default=60, type=int, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Å–µ–∫—É–Ω–¥—ã)"
)
@click.option("--once", "-o", is_flag=True, help="–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
def sync(symbols, continuous, interval, once):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö."""
    if not symbols and not once:
        console.print("[red]–ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --once –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.[/red]")
        return

    ats_cli = ATSCLI()
    ats_cli.setup_signal_handlers()

    async def run_sync():
        if not await ats_cli.initialize_system():
            return

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --once, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ
        if once:
            all_symbols = ["EURUSD", "GBPUSD", "USDJPY", "XAUUSD", "US100"]  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            console.print(f"[blue]–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {', '.join(all_symbols)}[/blue]")
            await ats_cli.run_sync_command(all_symbols, continuous=False, interval=interval)
        else:
            # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            await ats_cli.run_sync_command(list(symbols), continuous, interval)

    try:
        asyncio.run(run_sync())
    except KeyboardInterrupt:
        console.print("\n[yellow]–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    finally:
        asyncio.run(ats_cli.cleanup())


@cli.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
    ats_cli = ATSCLI()

    async def run_status():
        if not await ats_cli.initialize_system():
            return

        await ats_cli.show_status_command()

    asyncio.run(run_status())


@cli.command()
def interactive():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º."""
    ats_cli = ATSCLI()
    ats_cli.setup_signal_handlers()

    async def run_interactive():
        if not await ats_cli.initialize_system():
            return

        await ats_cli.run_interactive_mode()

    try:
        asyncio.run(run_interactive())
    except KeyboardInterrupt:
        console.print("\n[yellow]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω[/yellow]")
    finally:
        asyncio.run(ats_cli.cleanup())


@cli.command()
@click.option("--continuous", "-c", is_flag=True, help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
@click.option("--symbols", "-s", multiple=True, help="–°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
def init(continuous, symbols):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ."""
    ats_cli = ATSCLI()

    async def run_init():
        if await ats_cli.initialize_system():
            console.print(
                "[bold green]–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞![/bold green]"
            )

            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë
            if continuous:
                sync_symbols = list(symbols) if symbols else ["EURUSD", "GBPUSD", "USDJPY", "XAUUSD", "US100"]
                console.print(f"[blue]üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è: {', '.join(sync_symbols)}[/blue]")
                await ats_cli.run_sync_command(sync_symbols, continuous=True, interval=60)
        else:
            console.print("[bold red][ERR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã[/bold red]")
            sys.exit(1)

    try:
        asyncio.run(run_init())
    except KeyboardInterrupt:
        console.print("\n[yellow]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    finally:
        asyncio.run(ats_cli.cleanup())


if __name__ == "__main__":
    cli()
